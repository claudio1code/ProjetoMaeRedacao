# app.py

import streamlit as st
from datetime import datetime
from PIL import Image # Importa a biblioteca de imagem

# Importa as fun√ß√µes CORRETAS e DEFINITIVAS dos seus arquivos de l√≥gica
from logica_ia import pre_processar_imagem, extrair_texto_da_imagem, analisar_redacao_com_gemini, analisar_redacao_com_ia, criar_documento_docx

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(layout="wide")
st.title("ü§ñ Corretor de Reda√ß√£o IA")
st.markdown("Fa√ßa o upload da foto de uma reda√ß√£o manuscrita para receber uma an√°lise detalhada e precisa.")

# Adicionando um toque pessoal, conectando com o prop√≥sito do projeto
st.write("Este projeto foi desenvolvido com um prop√≥sito especial: ajudar na reforma da casa para a chegada do meu filho. Cada corre√ß√£o feita com esta ferramenta contribui para um futuro melhor.")
st.divider()

# --- √Årea de Upload ---
imagem_redacao = st.file_uploader(
    "Envie a foto da reda√ß√£o aqui (formato .jpg, .png ou .jpeg)",
    type=['jpg', 'png', 'jpeg']
)

st.divider()

# --- L√≥gica Principal (s√≥ executa se uma imagem for enviada) ---
if imagem_redacao is not None:
    
    # Exibe a imagem enviada para o usu√°rio conferir
    st.image(imagem_redacao, caption='Imagem da Reda√ß√£o Enviada', use_column_width=True)
    st.divider()

    # Seletor de Modelo de IA
    modelo_ia_selecionado = st.selectbox(
        "Escolha o modelo de IA para a corre√ß√£o:",
        ("Google (Gemini Pro - Gratuito)", "OpenAI (GPT-4o - Pago)")
    )
    
    if st.button("Analisar Reda√ß√£o", type="primary"):
        
        conteudo_imagem_bytes = imagem_redacao.getvalue()

        # --- Etapa 1: Pr√©-processamento da Imagem ---
        with st.spinner("1/4 - Otimizando a imagem para melhor leitura..."):
            imagem_processada_bytes = pre_processar_imagem(conteudo_imagem_bytes)

        # --- Etapa 2: OCR com Google Vision ---
        with st.spinner("2/4 - Lendo o texto da imagem otimizada..."):
            texto_extraido = extrair_texto_da_imagem(imagem_processada_bytes)
        
        # Verifica se o OCR falhou
        if "‚ùå" in texto_extraido:
            st.error(texto_extraido) # Mostra o erro detalhado da fun√ß√£o
        else:
            st.success("Texto extra√≠do com sucesso!", icon="‚úÖ")

            # --- Etapa 3: An√°lise com a IA Escolhida ---
            correcao_da_ia = ""
            with st.spinner(f"3/4 - {modelo_ia_selecionado} est√° analisando a reda√ß√£o..."):
                if "Google (Gemini Pro - Gratuito)" in modelo_ia_selecionado:
                    correcao_da_ia = analisar_redacao_com_gemini(texto_extraido)
                elif "OpenAI (GPT-4o - Pago)" in modelo_ia_selecionado:
                    correcao_da_ia = analisar_redacao_com_ia(texto_extraido)

            st.success("An√°lise da IA conclu√≠da!", icon="üß†")
            st.divider()
            
            # --- Exibi√ß√£o dos Resultados ---
            st.header("Resultados da An√°lise")
            
            if "‚ùå" in correcao_da_ia:
                st.error(correcao_da_ia)
            else:
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("Texto Original Extra√≠do")
                    st.text_area("Texto:", value=texto_extraido, height=500, disabled=True)
                with col2:
                    st.subheader("An√°lise e Corre√ß√£o da IA")
                    st.markdown(correcao_da_ia)
                
                # --- Etapa 4: Download do DOCX ---
                st.divider()
                with st.spinner("4/4 - Gerando relat√≥rio .docx para download..."):
                    # Aqui chamamos a fun√ß√£o que usa o nosso especialista gerador_docx.py
                    arquivo_docx = criar_documento_docx(texto_extraido, correcao_da_ia)
                    nome_arquivo = f"correcao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                
                st.download_button(
                    label="üì• Baixar Relat√≥rio Completo em .docx",
                    data=arquivo_docx,
                    file_name=nome_arquivo,
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

