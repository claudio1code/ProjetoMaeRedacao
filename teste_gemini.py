# teste_gemini.py
import os
from dotenv import load_dotenv
import google.generativeai as genai

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

print("--- Iniciando teste da API do Google Gemini (usando Conta de Servi√ßo) ---")

try:
    # 1. Pega o CAMINHO para o arquivo de credenciais a partir do .env
    caminho_credenciais = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    if not caminho_credenciais:
        raise Exception("A vari√°vel GOOGLE_APPLICATION_CREDENTIALS (arquivo .json) n√£o foi encontrada no .env")

    print(f"‚úÖ Credenciais da Conta de Servi√ßo encontradas!")

    # 2. Configura a biblioteca para usar o ARQUIVO DE CREDENCIAIS
    #    Esta √© a mudan√ßa fundamental que alinha o teste com o resto do projeto.
    genai.configure(credentials_file=caminho_credenciais)
    print("‚úÖ Biblioteca configurada com sucesso via Conta de Servi√ßo.")

    # 3. Inicializa o modelo
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    print("‚úÖ Modelo 'gemini-1.5-pro-latest' inicializado.")

    # 4. Envia uma mensagem de teste
    print("...Enviando 'Ol√°, mundo!' para o Gemini...")
    response = model.generate_content("Ol√°, mundo!")

    # 5. Se tudo deu certo, mostra a resposta
    print("\nüéâ SUCESSO! A conex√£o com a API do Gemini funcionou!")
    print("\nResposta da IA:", response.text)

except Exception as e:
    print(f"\n‚ùå FALHA! Ocorreu um erro durante o processo: {e}")
    print("\n‚û°Ô∏è Dica: Verifique se o arquivo .json referenciado no .env existe e se a 'Generative Language API' est√° ativada no seu projeto do Google Cloud.")
